// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NearbyApi {
  func initializeNearby(serviceId: String) throws
  func startAdvertising(data: String) throws
  func stopAdvertising() throws
  func startDiscovery(data: String) throws
  func stopDiscovery() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NearbyApiSetup {
  /// The codec used by NearbyApi.
  /// Sets up an instance of `NearbyApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NearbyApi?) {
    let initializeNearbyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.d2chess.NearbyApi.initializeNearby", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeNearbyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceIdArg = args[0] as! String
        do {
          try api.initializeNearby(serviceId: serviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeNearbyChannel.setMessageHandler(nil)
    }
    let startAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.d2chess.NearbyApi.startAdvertising", binaryMessenger: binaryMessenger)
    if let api = api {
      startAdvertisingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! String
        do {
          try api.startAdvertising(data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startAdvertisingChannel.setMessageHandler(nil)
    }
    let stopAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.d2chess.NearbyApi.stopAdvertising", binaryMessenger: binaryMessenger)
    if let api = api {
      stopAdvertisingChannel.setMessageHandler { _, reply in
        do {
          try api.stopAdvertising()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopAdvertisingChannel.setMessageHandler(nil)
    }
    let startDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.d2chess.NearbyApi.startDiscovery", binaryMessenger: binaryMessenger)
    if let api = api {
      startDiscoveryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! String
        do {
          try api.startDiscovery(data: dataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startDiscoveryChannel.setMessageHandler(nil)
    }
    let stopDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.d2chess.NearbyApi.stopDiscovery", binaryMessenger: binaryMessenger)
    if let api = api {
      stopDiscoveryChannel.setMessageHandler { _, reply in
        do {
          try api.stopDiscovery()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopDiscoveryChannel.setMessageHandler(nil)
    }
  }
}
